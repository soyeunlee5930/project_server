<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.project.mapper.ProductsMapper">

    <select id="getAllProducts" resultType="project.project.model.Products">
        SELECT * FROM products;
    </select>

    <!-- client main page에서 필요한 productList -->
    <resultMap id="ProductResultMap" type="project.project.requestParam.ProductList">
        <result property="id" column="id"/>
        <result property="productName" column="product_name"/>
        <result property="categoryId" column="category_id"/>
        <result property="discountRate" column="discount_rate"/>
        <result property="price" column="price"/>
        <result property="discountPrice" column="discount_price"/>
        <result property="accumulatedAmount" column="accumulated_amount"/>
        <result property="productCode" column="product_code"/>
        <result property="deliveryCountry" column="delivery_country"/>
        <result property="productDescription" column="product_description"/>
        <result property="thumbnailImageUrl" column="thumnail_image_url"/>
        <result property="detailImageUrl" column="detail_image_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="categoryName" column="category_name"/>
        <collection property="subCategoryNames" column="id" select="getSubCategoriesByProductId" />
        <collection property="options" column="id" select="getProductOptionsByProductId" />
    </resultMap>

<!--    <select id="getProductList" resultMap="ProductResultMap" parameterType="java.util.Map">-->
    <select id="getProductList" parameterType="java.util.Map">
        SELECT
            p.id,
            p.product_name,
            p.category_id,
            p.discount_rate,
            p.price,
            p.discount_price,
            p.accumulated_amount,
            p.product_code,
            p.delivery_country,
            p.product_description,
            p.thumnail_image_url,
            p.detail_image_url,
            p.created_at,
            p.updated_at,
            c.category_name,
            (SELECT GROUP_CONCAT(sc.sub_category_name)
            FROM sub_categories sc
            WHERE sc.category_id = p.category_id) AS subCategoryNames,
            (SELECT JSON_ARRAYAGG(JSON_OBJECT(
            'optionId', po.id,
            'color', clr.color,
            'size', sz.size,
            'quantity', st.quantity))
            FROM product_options po
            LEFT JOIN colors clr ON po.color_id = clr.id
            LEFT JOIN sizes sz ON po.size_id = sz.id
            LEFT JOIN stock st ON po.id = st.product_options_id
            WHERE po.product_id = p.id) AS options
        FROM products p
        JOIN categories c ON p.category_id = c.id
    </select>

    <!-- SubCategories를 가져오는 쿼리 -->
    <select id="getSubCategoriesByProductId" resultType="java.lang.String">
        SELECT sc.sub_category_name
        FROM sub_categories sc
        JOIN products p ON sc.category_id = p.category_id
        WHERE p.id = #{id}
    </select>

    <!-- Product Options를 가져오는 쿼리 -->
    <select id="getProductOptionsByProductId" resultType="project.project.model.ProductListOption">
        SELECT
        po.id AS option_id,
        clr.color,
        sz.size,
        st.quantity
        FROM product_options po
        LEFT JOIN colors clr ON po.color_id = clr.id
        LEFT JOIN sizes sz ON po.size_id = sz.id
        LEFT JOIN stock st ON po.id = st.product_options_id
        WHERE po.product_id = #{id}
    </select>

    <select id="getProductById" resultType="project.project.model.Products" parameterType="java.lang.Integer">
        SELECT * FROM products WHERE id = #{id}
    </select>

    <insert id="insertProduct" parameterType="project.project.model.Products">
        INSERT INTO products (product_name, category_id, discount_rate, price, discount_price, accumulated_amount, product_code, delivery_country, product_description, thumnail_image_url, detail_image_url, created_at, updated_at) VALUES (#{productName}, #{categoryId}, #{discountRate}, #{price}, #{discountPrice}, #{accumulatedAmount}, #{productCode}, #{deliveryCountry}, #{productDescription}, #{thumnailImageUrl}, #{detailImageUrl}, #{createdAt}, #{updatedAt})
    </insert>

    <update id="updateProduct" parameterType="project.project.model.Products">
        UPDATE products
        SET product_name = #{productName},
        category_id = #{categoryId},
        discount_rate = #{discountRate},
        price = #{price},
        discount_price = #{discountPrice},
        accumulated_amount = #{accumulatedAmount},
        product_code = #{productCode},
        delivery_country = #{deliveryCountry},
        product_description = #{productDescription},
        thumnail_image_url = #{thumnailImageUrl},
        detail_image_url = #{detailImageUrl},
        updated_at = now()
        WHERE id = #{id}
    </update>

    <delete id="deleteProduct" parameterType="java.lang.Integer">
        DELETE FROM products WHERE id = #{id}
    </delete>

    <!-- 카테고리 아이디와 관련된 상품 삭제 -->
    <delete id="deleteProductsByCategoryId" parameterType="java.lang.Integer">
        DELETE FROM products WHERE category_id = #{id};
    </delete>

    <!-- 종속 데이터 삭제를 위한 관련 코드 -->
    <select id="getProductOptionsIdsByProductId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT id FROM product_options WHERE product_id = #{productId}
    </select>

    <delete id="deleteProductOptionsByProductId" parameterType="java.lang.Integer">
        DELETE FROM product_options WHERE product_id = #{productId}
    </delete>

</mapper>